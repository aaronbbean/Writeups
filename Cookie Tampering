This is from tryhackme room AuthenticationBypass

Plain Text

The contents of some cookies can be in plain text, and it is obvious what they do. Take, for example, if these were the cookie set after a successful login:

Set-Cookie: logged_in=true; Max-Age=3600; Path=/
Set-Cookie: admin=false; Max-Age=3600; Path=/

First, we'll start just by requesting the target page:

Curl Request 1
user@tryhackme$ curl http://10.10.168.205/cookie-test
We can see we are returned a message of: Not Logged In

Now we'll send another request with the logged_in cookie set to true and the admin cookie set to false:

Curl Request 2
user@tryhackme$ curl -H "Cookie: logged_in=true; admin=false" http://10.10.168.205/cookie-test
We are given the message: Logged In As A User

Finally, we'll send one last request setting both the logged_in and admin cookie to true:

Curl Request 3
user@tryhackme$ curl -H "Cookie: logged_in=true; admin=true" http://10.10.168.205/cookie-test
This returns the result: Logged In As An Admin as well as a flag which you can use to answer question one

Encoding

Encoding is similar to hashing in that it creates what would seem to be a random string of text, but in fact, the encoding is reversible. So it begs the question, what is the point in encoding? Encoding allows us to convert binary data into human-readable text that can be easily and safely transmitted over mediums that only support plain text ASCII characters.

Common encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9,+, / and the equals sign for padding.

Take the below data as an example which is set by the web server upon logging in:

Set-Cookie: session=eyJpZCI6MSwiYWRtaW4iOmZhbHNlfQ==; Max-Age=3600; Path=/

This string base64 decoded has the value of {"id":1,"admin": false} we can then encode this back to base64 encoded again but instead setting the admin value to true, which now gives us admin access.
